#!/usr/bin/env bash

# Parse command-line arguments
REMOTE_JUMP_MOSH_PORTS="60001:60008"
REMOTE_JUMP_SSH_NAME=""
SSH_JUMP_ARGS=()

show_help() {
    cat <<'HELP'
mossh - Mobile Shell with SSH jump capability

Usage: mossh [options] <host> [destination]

Establish a durable terminal session using the mobile shell (Mosh),
optionally jump to another host using SSH.

Arguments:
  host          SSH config name for the remote server (required)
  destination   Optional host to SSH into after Mosh connection

Options:
  -p <ports>    UDP port range for Mosh (default: 60001:60008)
                Can be a single port (60010) or range (60010:60020)
  -h, --help    Show this help message

Examples:
  mossh myserver                        # Connect to myserver via Mosh
  mossh myserver internal               # Mosh to myserver, then SSH to internal
  mossh -p 60010:60020 myserver         # Use custom port range
  mossh -p 60010 myserver internal      # Single port with SSH jump

Environment Variables:
  DEBUG         Enable debug output if set

Requirements:
  - Remote configured in ~/.ssh/config on the local machine
  - Hosts configured in ~/.ssh/config on the remote, if using SSH for jumping
  - UDP ports open on remote server
HELP
}

# Parse options
while [[ $# -gt 0 ]]; do
    # Once we have the host, everything else goes to SSH
    if [[ -n "$REMOTE_JUMP_SSH_NAME" ]]; then
        SSH_JUMP_ARGS+=("$1")
        shift
        continue
    fi

    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -p)
            if [[ -z "${2:-}" ]]; then
                echo "Error: -p option requires a port or port range argument" >&2
                echo "Try 'mossh --help' for more information." >&2
                exit 1
            fi
            REMOTE_JUMP_MOSH_PORTS="$2"
            shift 2
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            echo "Try 'mossh --help' for more information." >&2
            exit 1
            ;;
        *)
            # First positional argument is the host
            REMOTE_JUMP_SSH_NAME="$1"
            shift
            ;;
    esac
done

# Check if host was specified
if [[ -z "$REMOTE_JUMP_SSH_NAME" ]]; then
    echo "Error: No host specified" >&2
    echo "Try 'mossh --help' for more information." >&2
    exit 1
fi

# Remote functions
function install_mosh() {
    if command -v mosh-server >/dev/null 2>&1; then
        return 0
    fi

    if command -v apt-get >/dev/null 2>&1; then
        sudo apt-get update && sudo apt-get install -y mosh
    elif command -v yum >/dev/null 2>&1; then
        sudo yum install -y mosh
    elif command -v dnf >/dev/null 2>&1; then
        sudo dnf install -y mosh
    elif command -v pacman >/dev/null 2>&1; then
        sudo pacman -S --noconfirm mosh
    elif command -v brew >/dev/null 2>&1; then
        brew install mosh
    else
        echo "Error: could not install mosh on the remote" >&2
        return 1
    fi
}

function execute_on_the_remote() {
    if [[ ${1@L} == 'ssh' ]]; then
        if [[ -z "${*:2}" ]]; then 
            exec /usr/bin/env bash -l
        else 
            ssh_output_file=$(mktemp)
            if ssh -T "${@:2}" true &>"$ssh_output_file"; then
                rm "$ssh_output_file"
                exec ssh "${@:2}"
            else 
                echo "Error: jumping via 'ssh ${*:2}' failed: $(cat "$ssh_output_file")" >&2
                rm "$ssh_output_file"
                exit 1
            fi
        fi
    fi
}

# Enable debug mode if requested
if [[ -n "${DEBUG:-}" ]]; then set -x; fi

# Get SSH configuration
REMOTE_JUMP_SSH_HOST=$(ssh -G "$REMOTE_JUMP_SSH_NAME" | awk '/^hostname / {print $2; exit}')
REMOTE_JUMP_SSH_PORT=$(ssh -G "$REMOTE_JUMP_SSH_NAME" | awk '/^port / {print $2; exit}')
REMOTE_JUMP_SSH_USER=$(ssh -G "$REMOTE_JUMP_SSH_NAME" | awk '/^user / {print $2; exit}')

if [[ "$REMOTE_JUMP_SSH_USER" == "$USER" ]]; then 
    unset REMOTE_JUMP_SSH_USER
fi

if [[ -z "$REMOTE_JUMP_SSH_HOST" || -z "$REMOTE_JUMP_SSH_PORT" ]]; then
    echo "Error: SSH host '$REMOTE_JUMP_SSH_NAME' is not configured in ~/.ssh/config" >&2
    exit 1
fi

# Build SSH command array
ssh_command=("ssh" "-p" "$REMOTE_JUMP_SSH_PORT")
if [[ -n "${REMOTE_JUMP_SSH_USER:-}" ]]; then 
    ssh_command+=("-l" "$REMOTE_JUMP_SSH_USER")
fi

# Install mosh locally if needed
if ! install_mosh; then 
    echo "Error: Failed to install mosh locally" >&2
    exit 1
fi

# Install mosh on the jump server if needed, and obtain
# the external IP address, favouring IPv6 over IPv4
public_ip="$("${ssh_command[@]}" "$REMOTE_JUMP_SSH_HOST" bash <<EOF
$(declare -f install_mosh)
if ! install_mosh; then exit \$?; fi
IP=\$(curl -s -6 ifconfig.me)
if [[ -n "\$IP" ]]; then 
    echo "\$IP"
else 
    IP=\$(curl -s -4 ifconfig.me)
    if [[ -n "\$IP" ]]; then 
        echo "\$IP"
    fi
fi
exit 0
EOF
)"

if [[ $? -ne 0 ]]; then
    echo "Error: Failed to install mosh on remote" >&2
    exit 1
fi

if [[ -z "$public_ip" ]]; then 
    echo "Error: Failed to retrieve public IP on remote" >&2
    exit 1
else
    echo "Mosh will bind to $public_ip on port(s) $REMOTE_JUMP_MOSH_PORTS"
fi

# Build properly quoted arguments for remote SSH execution
remote_args=""
for arg in "${SSH_JUMP_ARGS[@]}"; do
    remote_args="$remote_args $(printf '%q' "$arg")"
done

# Fix locale - ensure we have a proper UTF-8 locale
# LC_CTYPE must be a full locale (e.g., en_US.UTF-8), not just "UTF-8"
if [[ -z "${LC_CTYPE:-}" ]] || [[ "$LC_CTYPE" != *.UTF-8 && "$LC_CTYPE" != *.utf8 ]]; then
    export LANG="en_US.UTF-8"
    export LC_CTYPE="en_US.UTF-8"
fi

# Connect via mosh
exec mosh \
    --ssh="${ssh_command[*]}" \
    --bind-server="$public_ip" \
    -p "$REMOTE_JUMP_MOSH_PORTS" \
    "$REMOTE_JUMP_SSH_HOST" -- bash \
    -c "$(declare -f execute_on_the_remote); execute_on_the_remote ssh$remote_args"